---
- name: 'Include OS specific vars'
  include_vars: "{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
  no_log: true

- name: 'Ensure supporting tools'
  package:
    name:
      - 'git'
      - "{{ ansible_controller_pip_pkg }}"
      - "{{ ansible_controller_jmespath_pkg }}"
      - "{{ ansible_controller_gpgagent_pkg }}"
      - "{{ ansible_controller_requests_pkg }}"
      - "{{ ansible_controller_netaddr_pkg }}"
      - "{{ ansible_controller_passlib_pkg }}"

- name: 'Ensure repositories'
  include_tasks: "repos-{{ ansible_facts['os_family'] }}.yml"
  when: ansible_controller_setup_repos

- name: 'Ensure Ansible from Package Manager (Debian-like)'
  apt:
    name: "{{ ansible_controller_ansible_pkg }}"
    state: 'present'
    install_recommends: false
  when:
    - not ansible_controller_ansible_from_pip
    - ansible_facts['os_family'] == 'Debian'

- name: 'Ensure Ansible from Package Manager (RHEL-like)'
  yum:
    name: "{{ ansible_controller_ansible_pkg }}"
    state: 'present'
  when:
    - not ansible_controller_ansible_from_pip
    - ansible_facts['os_family'] == 'RedHat'

- name: 'Set environment facts (placeholder)'
  set_fact:
    proxy_env:
      empty_var: 'Just_a_placeholder'

- name: 'Set environment facts (http_proxy)'
  set_fact:
    proxy_env:
      http_proxy: "{{ http_proxy_url }}"
      https_proxy: "{{ http_proxy_url }}"
  when: http_proxy_url is defined

- name: 'Ensure Ansible from PyPi'
  pip:
    name: "{{ ansible_controller_ansible_pkg }}"
    state: 'present'
    umask: "0022"
  when: ansible_controller_ansible_from_pip
  environment: "{{ proxy_env }}"

- name: 'Ensure extra PiPy tools'
  pip:
    name:
      - 'ansible-merge-vars'
      - 'ara'
    state: 'present'
    umask: "0022"
  environment: "{{ proxy_env }}"

- name: 'Ensure useraccount'
  user:
    name: 'ansible'
    comment: 'Ansible Runner'
    state: 'present'

- name: 'Ensure directories'
  file:
    path: "{{ dir }}"
    state: 'directory'
    owner: 'ansible'
    group: 'ansible'
  loop:
    - '/opt/ansible/projects/'
    - '/opt/ansible/resources/'
    - '/opt/ansible/tools/'
    - '/opt/ansible/vaults/'
  loop_control:
    loop_var: 'dir'

- name: 'Ensure directories'
  file:
    path: '/home/ansible/.gnupg/'
    state: 'directory'
    owner: 'ansible'
    group: 'ansible'
    mode: 0700

- name: 'Ensure Ansible utils repo'
  git:
    repo: "{{ ansible_controller_utils_repo }}"
    dest: '/opt/ansible/tools/ansible-utils'
    force: true
    umask: '0022'
  environment: "{{ proxy_env }}"

- name: 'Ensure dir symlinks in Ansible Runner home'
  file:
    src: "/opt/ansible/{{ dir_link }}"
    dest: "/home/ansible/{{ dir_link }}"
    state: 'link'
  loop:
    - 'projects'
    - 'resources'
  loop_control:
    loop_var: 'dir_link'

- name: 'Ensure tool symlinks'
  file:
    src: "/opt/ansible/tools/ansible-utils/{{ tool_link }}"
    dest: "/usr/local/bin/{{ tool_link }}"
    state: 'link'
  loop:
    - 'encryptansible'
    - 'runansible'
    - 'showansible'
  loop_control:
    loop_var: 'tool_link'

- name: 'Ensure gpgkey symlink (non EL7)'
  file:
    src: '/opt/ansible/tools/ansible-utils/gpgkey'
    dest: '/usr/local/bin/gpgkey'
    state: 'link'
  when: >
    (ansible_facts['os_family'] != 'RedHat' and ansible_facts['distribution_major_version'] > '7') or
    ansible_facts['os_family'] != 'RedHat'

- name: 'Ensure gpgkey symlink (EL7)'
  file:
    src: '/opt/ansible/tools/ansible-utils/gpgkey_el7'
    dest: '/usr/local/bin/gpgkey'
    state: 'link'
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] == '7'

- name: 'Ensure retrieve_vault.sh'
  copy:
    src: '/opt/ansible/tools/ansible-utils/retrieve_vault.sh'
    dest: '/opt/ansible/vaults/retrieve_vault.sh'
    owner: 'ansible'
    group: 'ansible'
    mode: 0775
    remote_src: true

- name: 'Ensure GPG agent settings'
  copy:
    src: "gpg-agent.conf"
    dest: '/home/ansible/.gnupg/gpg-agent.conf'
    owner: 'ansible'
    group: 'ansible'

- name: 'Ensure shell settings'
  blockinfile:
    path: '/home/ansible/.bashrc'
    owner: 'ansible'
    group: 'ansible'
    marker: '# {mark} ANSIBLE-CONTROLLER ROLE MANAGED BLOCK'
    block: "{{ lookup('file', 'bashrc') }}"

- name: 'Ensure gpgkey cronjob'
  cron:
    name: 'Hourly GPG key check'
    minute: '0'
    user: 'ansible'
    job: '/usr/local/bin/gpgkey -c'
