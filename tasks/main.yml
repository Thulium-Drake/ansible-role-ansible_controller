---
- name: 'Include OS specific vars'
  ansible.builtin.include_vars: "{{ lookup('first_found', role_vars_files) }}"
  vars:
    role_vars_files:
      files:
        - "{{ ansible_facts['os_family'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"
        - "{{ ansible_facts['os_family'] }}.yml"
      paths:
        - 'vars'
  no_log: true

- name: 'Ensure supporting tools'
  ansible.builtin.package:
    name:
      - 'git'
      - 'jq'
      - 'pwgen'
      - "{{ ansible_controller_pip_pkg }}"
      - "{{ ansible_controller_cryptography_pkg }}"
      - "{{ ansible_controller_jmespath_pkg }}"
      - "{{ ansible_controller_gpgagent_pkg }}"
      - "{{ ansible_controller_requests_pkg }}"
      - "{{ ansible_controller_netaddr_pkg }}"

- name: 'Ensure supporting tools - non-RHEL'
  ansible.builtin.package:
    name:
      - "{{ ansible_controller_passlib_pkg }}"
  when: ansible_facts['os_family'] != 'RedHat'

- name: 'Ensure repositories'
  ansible.builtin.include_tasks: "repos-{{ ansible_facts['os_family'] }}.yml"
  when: ansible_controller_setup_repos

- name: 'Ensure Ansible from Package Manager (Debian-like)'
  ansible.builtin.apt:
    name: "{{ ansible_controller_ansible_pkg }}"
    state: 'present'
    install_recommends: false
  when:
    - not ansible_controller_ansible_from_pip
    - ansible_facts['os_family'] == 'Debian'

- name: 'Ensure Ansible from Package Manager (RHEL-like)'
  ansible.builtin.yum:
    name: "{{ ansible_controller_ansible_pkg }}"
    state: 'present'
  when:
    - not ansible_controller_ansible_from_pip
    - ansible_facts['os_family'] == 'RedHat'

- name: 'Set environment facts (placeholder)'
  ansible.builtin.set_fact:
    proxy_env:
      empty_var: 'Just_a_placeholder'

- name: 'Set environment facts (http_proxy)'
  ansible.builtin.set_fact:
    proxy_env:
      http_proxy: "{{ http_proxy_url }}"
      https_proxy: "{{ http_proxy_url }}"
  when: http_proxy_url is defined

- name: 'Install remaining supporting tools from PyPi (RHEL)'
  ansible.builtin.pip:
    name:
      - 'passlib'
      - 'dnspython'
    state: 'present'
    umask: "0022"
    executable: "{{ ansible_controller_pip_exe | default(omit) }}"
  when:
    - ansible_facts['os_family'] == 'RedHat'
  environment: "{{ proxy_env }}"

- name: 'Include tasks when installing with PyPi (RHEL)'
  ansible.builtin.include_tasks: "install-{{ ansible_controller_pip_method }}.yml"
  when: ansible_facts['os_family'] == 'RedHat'

- name: 'Include tasks when installing with PyPi (Debian)'
  ansible.builtin.include_tasks: "install-{{ ansible_controller_pip_method }}.yml"
  when: ansible_facts['distribution'] == 'Debian'

- name: 'Ensure useraccount'
  ansible.builtin.user:
    name: 'ansible'
    comment: 'Ansible Runner'
    state: 'present'

- name: 'Check linger for useraccount'
  ansible.builtin.command: loginctl show-user ansible -p Linger
  register: 'ansible_controller_linger'
  changed_when: false
  when: not _ansible_controller_molecule | default(false) | bool

- name: 'Ensure linger enabled for useraccount'
  ansible.builtin.command: loginctl enable-linger ansible
  when:
    - not _ansible_controller_molecule | default(false) | bool
    - "'Linger=no' in ansible_controller_linger['stdout']"
  changed_when: true

- name: 'Ensure directories'
  ansible.builtin.file:
    path: "{{ dir }}"
    state: 'directory'
    owner: 'ansible'
    group: 'ansible'
    mode: '0750'
  loop:
    - '/opt/ansible/projects/'
    - '/opt/ansible/resources/'
    - '/opt/ansible/tools/'
    - '/opt/ansible/vaults/'
  loop_control:
    loop_var: 'dir'

- name: 'Ensure directories'
  ansible.builtin.file:
    path: '/home/ansible/.gnupg/'
    state: 'directory'
    owner: 'ansible'
    group: 'ansible'
    mode: '0700'

- name: 'Set up Ansible Utils'
  when: ansible_controller_utils_enabled
  block:
    - name: 'Ensure Ansible utils repo'
      ansible.builtin.git:
        repo: "{{ ansible_controller_utils_repo }}"
        dest: '/opt/ansible/tools/ansible-utils'
        version: 'master'
        force: true
        umask: '0022'
      environment: "{{ proxy_env }}"

    - name: 'Ensure dir symlinks in Ansible Runner home'
      ansible.builtin.file:
        src: "/opt/ansible/{{ dir_link }}"
        dest: "/home/ansible/{{ dir_link }}"
        state: 'link'
      loop:
        - 'projects'
        - 'resources'
      loop_control:
        loop_var: 'dir_link'

    - name: 'Ensure tool symlinks'
      ansible.builtin.file:
        src: "/opt/ansible/tools/ansible-utils/{{ tool_link }}"
        dest: "/usr/local/bin/{{ tool_link }}"
        state: 'link'
      loop:
        - 'encryptansible'
        - 'runansible'
        - 'showansible'
        - 'gpgkey'
      loop_control:
        loop_var: 'tool_link'

    - name: 'Ensure retrieve_vault.sh'
      ansible.builtin.copy:
        src: '/opt/ansible/tools/ansible-utils/retrieve_vault.sh'
        dest: '/opt/ansible/vaults/retrieve_vault.sh'
        owner: 'ansible'
        group: 'ansible'
        mode: '0775'
        remote_src: true

    - name: 'Ensure gpgkey cronjob'
      ansible.builtin.cron:
        name: 'Hourly GPG key check'
        minute: '0'
        user: 'ansible'
        job: '/usr/local/bin/gpgkey -c'

- name: 'Ensure GPG agent settings'
  ansible.builtin.template:
    src: 'gpg-agent.conf.j2'
    dest: '/home/ansible/.gnupg/gpg-agent.conf'
    owner: 'ansible'
    group: 'ansible'
    mode: '0640'

- name: 'Ensure shell settings'
  ansible.builtin.blockinfile:
    path: '/home/ansible/.bashrc'
    owner: 'ansible'
    group: 'ansible'
    marker: '# {mark} ANSIBLE-CONTROLLER ROLE MANAGED BLOCK'
    block: "{{ lookup('file', 'bashrc') }}"

- name: 'Configure for GPG agent debug logging'
  when: ansible_controller_gpg_debug
  block:
    - name: 'Configure log file'
      ansible.builtin.file:
        path: '/var/log/ansible-gpg-agent.log'
        owner: 'ansible'
        group: 'ansible'
        mode: '0640'

    - name: 'Configure logrotate for GPG debug log'
      ansible.builtin.copy:
        src: 'ansible-gpg-agent'
        dest: '/etc/logrotate.d/ansible-gpg-agent'
        owner: 'root'
        group: 'root'
        mode: '0644'
      notify: 'Restart logrotate'
